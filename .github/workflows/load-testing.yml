name: Load Test Runner

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment (signet/mainnet)"
        required: true
        type: choice
        options: [signet, mainnet]
      run-mode:
        description: "Run single test or all tests?"
        required: true
        type: choice
        options: [single, all]
      test-case:
        description: "Test config filename (without .yml) - required if 'single' mode"
        required: false
        type: string
        default: ""

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      test-cases: ${{ steps.get-tests.outputs.test-cases }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref_name }}
          fetch-depth: 0

      - name: Discover test cases
        id: get-tests
        run: |
          if [[ "${{ inputs.run-mode }}" == "all" ]]; then
            # Find all YAML files in configs directory
            tests=$(find test/load/configs -name "*.yml" -exec basename {} .yml \; | jq -R -s -c 'split("\n") | map(select(. != ""))')
          else
            # Use the specified test case
            tests="[\"${{ inputs.test-case }}\"]"
          fi
          echo "test-cases=$tests" >> $GITHUB_OUTPUT

  load-test:
    needs: setup
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test-case: ${{ fromJSON(needs.setup.outputs.test-cases) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref_name }}
          fetch-depth: 0

      - name: Setup Node.js & Artillery
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
      - run: npm install -g artillery@latest

      - name: Install dependencies
        run: npm ci

      - name: Configure AWS CLI
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.TESTNET_S3_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.TESTNET_S3_SECRET_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.TESTNET_S3_REGION }}
        run: |
          aws configure set aws_access_key_id "$AWS_ACCESS_KEY_ID"
          aws configure set aws_secret_access_key "$AWS_SECRET_ACCESS_KEY"
          aws configure set region "$AWS_DEFAULT_REGION"

      - name: Run Artillery test
        id: run_test
        env:
          ARTILLERY_API_KEY: ${{ secrets.QA_ARTILLERY_API_KEY }}
          SIGNET_API_KEY: ${{ secrets.QA_SIGNET_API_KEY }}
          MAINNET_API_KEY: ${{ secrets.QA_MAINNET_API_KEY }}
          SIGNET_API_URL: ${{ secrets.QA_SIGNET_API_URL }}
          MAINNET_API_URL: ${{ secrets.QA_MAINNET_API_URL }}
        run: |
          TS=$(date -u +"%Y-%m-%dT%H-%M-%SZ")
          ENV="${{ inputs.environment }}"
          TEST="${{ matrix.test-case }}"
          
          # File paths
          JSON_REPORT="reports/${TEST}-${ENV}-${TS}.json"
          ERROR_REPORT="reports/${TEST}-${ENV}-${TS}-errors.csv"
          S3_JSON="s3://${{ secrets.TESTNET_S3_BUCKET_NAME }}/${ENV}/json/${TEST}-${ENV}-${TS}.json"
          CONFIG="test/load/configs/${TEST}.yml"

          # Set environment variables
          if [[ "$ENV" == "signet" ]]; then
            export API_URL="$SIGNET_API_URL"
            export API_KEY="$SIGNET_API_KEY"
          else
            export API_URL="$MAINNET_API_URL"
            export API_KEY="$MAINNET_API_KEY"
          fi

          # Run Artillery
          artillery run \
            --environment "$ENV" \
            --record --key "$ARTILLERY_API_KEY" \
            --output "$JSON_REPORT" \
            "$CONFIG"

          # Generate error report (HTTP status codes)
          jq -r '
            ["status_code", "count"],
            (.aggregate.codes | to_entries[] | [.key, .value]) 
            | @csv' "$JSON_REPORT" > "$ERROR_REPORT"

          # Save outputs
          echo "report_id=$(jq -r '.metadata."artillery.io/record".id' "$JSON_REPORT")" >> $GITHUB_OUTPUT
          echo "json_path=$JSON_REPORT" >> $GITHUB_OUTPUT
          echo "error_path=$ERROR_REPORT" >> $GITHUB_OUTPUT
          echo "s3_json=$S3_JSON" >> $GITHUB_OUTPUT
          echo "timestamp=$TS" >> $GITHUB_OUTPUT

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: load-test-${{ matrix.test-case }}-${{ inputs.environment }}-${{ steps.run_test.outputs.timestamp }}
          path: |
            ${{ steps.run_test.outputs.json_path }}
            ${{ steps.run_test.outputs.error_path }}

      - name: Upload to S3
        run: |
          aws s3 cp "${{ steps.run_test.outputs.json_path }}" "${{ steps.run_test.outputs.s3_json }}"