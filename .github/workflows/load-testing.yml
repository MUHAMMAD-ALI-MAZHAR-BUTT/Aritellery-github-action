name: Enhanced Load Test Runner

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment (signet/mainnet)"
        required: true
        type: choice
        options: [signet, mainnet]
      run-mode:
        description: "Run single test or all tests?"
        required: true
        type: choice
        options: [single, all]
      test-case:
        description: "Test config filename (without .yml)"
        required: false
        type: string
        default: ""

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      test-cases: ${{ steps.get-tests.outputs.test-cases }}
    steps:
      - uses: actions/checkout@v4
      - name: Discover tests
        id: get-tests
        run: |
          if [[ "${{ inputs.run-mode }}" == "all" ]]; then
            tests=$(find test/load/configs -name "*.yml" -exec basename {} .yml \; | jq -R -s -c 'split("\n") | map(select(. != ""))')
          else
            tests="[\"${{ inputs.test-case }}\"]"
          fi
          echo "test-cases=$tests" >> $GITHUB_OUTPUT

  load-test:
    needs: setup
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test-case: ${{ fromJSON(needs.setup.outputs.test-cases) }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup environment
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: "npm"
        run: |
          npm install -g artillery@latest
          npm ci

      - name: Configure AWS
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.TESTNET_S3_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.TESTNET_S3_SECRET_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.TESTNET_S3_REGION }}
        run: |
          aws configure set aws_access_key_id "$AWS_ACCESS_KEY_ID"
          aws configure set aws_secret_access_key "$AWS_SECRET_ACCESS_KEY"
          aws configure set region "$AWS_DEFAULT_REGION"

      - name: Create directories
        run: |
          mkdir -p reports/{json,errors,logs}
          mkdir -p artifacts

      - name: Run load test
        id: test-run
        env:
          ARTILLERY_API_KEY: ${{ secrets.QA_ARTILLERY_API_KEY }}
          SIGNET_API_KEY: ${{ secrets.QA_SIGNET_API_KEY }}
          MAINNET_API_KEY: ${{ secrets.QA_MAINNET_API_KEY }}
          SIGNET_API_URL: ${{ secrets.QA_SIGNET_API_URL }}
          MAINNET_API_URL: ${{ secrets.QA_MAINNET_API_URL }}
        run: |
          TS=$(date -u +"%Y-%m-%dT%H-%M-%SZ")
          ENV="${{ inputs.environment }}"
          TEST="${{ matrix.test-case }}"

          # File paths
          JSON_REPORT="reports/json/${TEST}-${ENV}-${TS}.json"
          ERROR_LOG="reports/errors/${TEST}-${ENV}-${TS}-detailed-errors.log"
          METRICS_CSV="reports/logs/${TEST}-${ENV}-${TS}-metrics.csv"
          S3_BASE_PATH="s3://${{ secrets.TESTNET_S3_BUCKET_NAME }}/${ENV}/${TS}"

          # Set API config
          [[ "$ENV" == "signet" ]] && export API_URL="$SIGNET_API_URL" API_KEY="$SIGNET_API_KEY" || 
            export API_URL="$MAINNET_API_URL" API_KEY="$MAINNET_API_KEY"

          # Run Artillery with detailed logging
          artillery run \
            --environment "$ENV" \
            --record --key "$ARTILLERY_API_KEY" \
            --output "$JSON_REPORT" \
            "test/load/configs/${TEST}.yml" 2>&1 | tee "${ERROR_LOG}"

          # Generate metrics report
          jq -r '
            ["status_code", "count"],
            (.aggregate.codes | to_entries[] | [.key, .value]) 
            | @csv' "$JSON_REPORT" > "$METRICS_CSV"

          # Extract failed requests
          jq -r '
            .intermediate[]? | 
            select(.latency > 5000 or (.statusCode != 200)) |
            "\(.timestamp) | \(.method) \(.url) | Status: \(.statusCode) | Latency: \(.latency)ms"
          ' "$JSON_REPORT" >> "${ERROR_LOG}"

          # Package artifacts
          tar -czvf "artifacts/${TEST}-${ENV}-${TS}.tar.gz" \
            "$JSON_REPORT" \
            "$ERROR_LOG" \
            "$METRICS_CSV"

          # Set outputs
          echo "artifact_path=artifacts/${TEST}-${ENV}-${TS}.tar.gz" >> $GITHUB_OUTPUT
          echo "s3_json_path=${S3_BASE_PATH}/json/${TEST}.json" >> $GITHUB_OUTPUT
          echo "s3_logs_path=${S3_BASE_PATH}/logs/" >> $GITHUB_OUTPUT

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: load-test-${{ matrix.test-case }}-${{ inputs.environment }}
          path: |
            ${{ steps.test-run.outputs.artifact_path }}
            reports/**

      - name: Upload to S3
        run: |
          aws s3 cp "${{ steps.test-run.outputs.artifact_path }}" "${{ steps.test-run.outputs.s3_logs_path }}"
          aws s3 cp "reports/json/" "${{ steps.test-run.outputs.s3_json_path }}" --recursive
          aws s3 cp "reports/errors/" "${{ steps.test-run.outputs.s3_logs_path }}" --recursive
          aws s3 cp "reports/logs/" "${{ steps.test-run.outputs.s3_logs_path }}" --recursive

      - name: Cleanup
        run: rm -rf reports/ artifacts/
